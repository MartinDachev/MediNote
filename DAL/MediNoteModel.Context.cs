//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class MediNoteEntities : DbContext
    {
        public MediNoteEntities()
            : base("name=MediNoteEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<doctors_table> doctors_table { get; set; }
        public virtual DbSet<healthcareFacilities_table> healthcareFacilities_table { get; set; }
        public virtual DbSet<institution_table> institution_table { get; set; }
        public virtual DbSet<medicalNote_table> medicalNote_table { get; set; }
        public virtual DbSet<student_table> student_table { get; set; }
        public virtual DbSet<sysdiagram> sysdiagrams { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual int AddInstitution(string institutionName)
        {
            var institutionNameParameter = institutionName != null ?
                new ObjectParameter("InstitutionName", institutionName) :
                new ObjectParameter("InstitutionName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddInstitution", institutionNameParameter);
        }
    
        public virtual int AddMedicalNote(Nullable<int> doctorID, Nullable<int> studentID, Nullable<int> institutionID, string mEN, Nullable<System.DateTime> visitDate, string diagnose, string needs)
        {
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var institutionIDParameter = institutionID.HasValue ?
                new ObjectParameter("InstitutionID", institutionID) :
                new ObjectParameter("InstitutionID", typeof(int));
    
            var mENParameter = mEN != null ?
                new ObjectParameter("MEN", mEN) :
                new ObjectParameter("MEN", typeof(string));
    
            var visitDateParameter = visitDate.HasValue ?
                new ObjectParameter("VisitDate", visitDate) :
                new ObjectParameter("VisitDate", typeof(System.DateTime));
    
            var diagnoseParameter = diagnose != null ?
                new ObjectParameter("Diagnose", diagnose) :
                new ObjectParameter("Diagnose", typeof(string));
    
            var needsParameter = needs != null ?
                new ObjectParameter("Needs", needs) :
                new ObjectParameter("Needs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddMedicalNote", doctorIDParameter, studentIDParameter, institutionIDParameter, mENParameter, visitDateParameter, diagnoseParameter, needsParameter);
        }
    
        public virtual int AddNewDoctor(string doctorName, string doctorPosition, string doctorUIN, Nullable<int> healthcareFacilityId, string doctorEmail, string doctorPhoneNumber)
        {
            var doctorNameParameter = doctorName != null ?
                new ObjectParameter("DoctorName", doctorName) :
                new ObjectParameter("DoctorName", typeof(string));
    
            var doctorPositionParameter = doctorPosition != null ?
                new ObjectParameter("DoctorPosition", doctorPosition) :
                new ObjectParameter("DoctorPosition", typeof(string));
    
            var doctorUINParameter = doctorUIN != null ?
                new ObjectParameter("DoctorUIN", doctorUIN) :
                new ObjectParameter("DoctorUIN", typeof(string));
    
            var healthcareFacilityIdParameter = healthcareFacilityId.HasValue ?
                new ObjectParameter("HealthcareFacilityId", healthcareFacilityId) :
                new ObjectParameter("HealthcareFacilityId", typeof(int));
    
            var doctorEmailParameter = doctorEmail != null ?
                new ObjectParameter("DoctorEmail", doctorEmail) :
                new ObjectParameter("DoctorEmail", typeof(string));
    
            var doctorPhoneNumberParameter = doctorPhoneNumber != null ?
                new ObjectParameter("DoctorPhoneNumber", doctorPhoneNumber) :
                new ObjectParameter("DoctorPhoneNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewDoctor", doctorNameParameter, doctorPositionParameter, doctorUINParameter, healthcareFacilityIdParameter, doctorEmailParameter, doctorPhoneNumberParameter);
        }
    
        public virtual int AddNewHealthcareFacilitie(string facilityName)
        {
            var facilityNameParameter = facilityName != null ?
                new ObjectParameter("FacilityName", facilityName) :
                new ObjectParameter("FacilityName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddNewHealthcareFacilitie", facilityNameParameter);
        }
    
        public virtual int AddStudent(string studentNIN, string studentName, string studentAddress, Nullable<int> studentAge)
        {
            var studentNINParameter = studentNIN != null ?
                new ObjectParameter("StudentNIN", studentNIN) :
                new ObjectParameter("StudentNIN", typeof(string));
    
            var studentNameParameter = studentName != null ?
                new ObjectParameter("StudentName", studentName) :
                new ObjectParameter("StudentName", typeof(string));
    
            var studentAddressParameter = studentAddress != null ?
                new ObjectParameter("StudentAddress", studentAddress) :
                new ObjectParameter("StudentAddress", typeof(string));
    
            var studentAgeParameter = studentAge.HasValue ?
                new ObjectParameter("StudentAge", studentAge) :
                new ObjectParameter("StudentAge", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("AddStudent", studentNINParameter, studentNameParameter, studentAddressParameter, studentAgeParameter);
        }
    
        public virtual int DeleteDoctorByID(Nullable<int> doctorID)
        {
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteDoctorByID", doctorIDParameter);
        }
    
        public virtual int DeleteHealthcareFacilitieByID(Nullable<int> facilityID)
        {
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteHealthcareFacilitieByID", facilityIDParameter);
        }
    
        public virtual int DeleteInstitution(Nullable<int> institutionID)
        {
            var institutionIDParameter = institutionID.HasValue ?
                new ObjectParameter("InstitutionID", institutionID) :
                new ObjectParameter("InstitutionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteInstitution", institutionIDParameter);
        }
    
        public virtual int DeleteStudent(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("DeleteStudent", studentIDParameter);
        }
    
        public virtual ObjectResult<GetDoctorByID_Result> GetDoctorByID(Nullable<int> doctorID)
        {
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDoctorByID_Result>("GetDoctorByID", doctorIDParameter);
        }
    
        public virtual ObjectResult<GetHealthcareFacilitieByID_Result> GetHealthcareFacilitieByID(Nullable<int> facilityID)
        {
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetHealthcareFacilitieByID_Result>("GetHealthcareFacilitieByID", facilityIDParameter);
        }
    
        public virtual ObjectResult<GetInstitutionByID_Result> GetInstitutionByID(Nullable<int> institutionID)
        {
            var institutionIDParameter = institutionID.HasValue ?
                new ObjectParameter("InstitutionID", institutionID) :
                new ObjectParameter("InstitutionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetInstitutionByID_Result>("GetInstitutionByID", institutionIDParameter);
        }
    
        public virtual ObjectResult<GetMedicalNoteByID_Result> GetMedicalNoteByID(Nullable<int> medicalNoteID)
        {
            var medicalNoteIDParameter = medicalNoteID.HasValue ?
                new ObjectParameter("MedicalNoteID", medicalNoteID) :
                new ObjectParameter("MedicalNoteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetMedicalNoteByID_Result>("GetMedicalNoteByID", medicalNoteIDParameter);
        }
    
        public virtual ObjectResult<GetStudentByID_Result> GetStudentByID(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetStudentByID_Result>("GetStudentByID", studentIDParameter);
        }
    
        public virtual int UpdateDoctorByID(Nullable<int> doctorID, string doctorName, string doctorPosition, string doctorUIN, Nullable<int> healthcareFacilityId, string doctorEmail, string doctorPhoneNumber)
        {
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var doctorNameParameter = doctorName != null ?
                new ObjectParameter("DoctorName", doctorName) :
                new ObjectParameter("DoctorName", typeof(string));
    
            var doctorPositionParameter = doctorPosition != null ?
                new ObjectParameter("DoctorPosition", doctorPosition) :
                new ObjectParameter("DoctorPosition", typeof(string));
    
            var doctorUINParameter = doctorUIN != null ?
                new ObjectParameter("DoctorUIN", doctorUIN) :
                new ObjectParameter("DoctorUIN", typeof(string));
    
            var healthcareFacilityIdParameter = healthcareFacilityId.HasValue ?
                new ObjectParameter("HealthcareFacilityId", healthcareFacilityId) :
                new ObjectParameter("HealthcareFacilityId", typeof(int));
    
            var doctorEmailParameter = doctorEmail != null ?
                new ObjectParameter("DoctorEmail", doctorEmail) :
                new ObjectParameter("DoctorEmail", typeof(string));
    
            var doctorPhoneNumberParameter = doctorPhoneNumber != null ?
                new ObjectParameter("DoctorPhoneNumber", doctorPhoneNumber) :
                new ObjectParameter("DoctorPhoneNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateDoctorByID", doctorIDParameter, doctorNameParameter, doctorPositionParameter, doctorUINParameter, healthcareFacilityIdParameter, doctorEmailParameter, doctorPhoneNumberParameter);
        }
    
        public virtual int UpdateHealthcareFacilitieByID(Nullable<int> facilityID, string facilityName)
        {
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(int));
    
            var facilityNameParameter = facilityName != null ?
                new ObjectParameter("FacilityName", facilityName) :
                new ObjectParameter("FacilityName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateHealthcareFacilitieByID", facilityIDParameter, facilityNameParameter);
        }
    
        public virtual int UpdateInstitution(Nullable<int> institutionID, string institutionName)
        {
            var institutionIDParameter = institutionID.HasValue ?
                new ObjectParameter("InstitutionID", institutionID) :
                new ObjectParameter("InstitutionID", typeof(int));
    
            var institutionNameParameter = institutionName != null ?
                new ObjectParameter("InstitutionName", institutionName) :
                new ObjectParameter("InstitutionName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateInstitution", institutionIDParameter, institutionNameParameter);
        }
    
        public virtual int UpdateMedicalNote(Nullable<int> medicalNoteID, Nullable<int> doctorID, Nullable<int> studentID, Nullable<int> institutionID, string mEN, Nullable<System.DateTime> visitDate, string diagnose, string needs)
        {
            var medicalNoteIDParameter = medicalNoteID.HasValue ?
                new ObjectParameter("MedicalNoteID", medicalNoteID) :
                new ObjectParameter("MedicalNoteID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var institutionIDParameter = institutionID.HasValue ?
                new ObjectParameter("InstitutionID", institutionID) :
                new ObjectParameter("InstitutionID", typeof(int));
    
            var mENParameter = mEN != null ?
                new ObjectParameter("MEN", mEN) :
                new ObjectParameter("MEN", typeof(string));
    
            var visitDateParameter = visitDate.HasValue ?
                new ObjectParameter("VisitDate", visitDate) :
                new ObjectParameter("VisitDate", typeof(System.DateTime));
    
            var diagnoseParameter = diagnose != null ?
                new ObjectParameter("Diagnose", diagnose) :
                new ObjectParameter("Diagnose", typeof(string));
    
            var needsParameter = needs != null ?
                new ObjectParameter("Needs", needs) :
                new ObjectParameter("Needs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateMedicalNote", medicalNoteIDParameter, doctorIDParameter, studentIDParameter, institutionIDParameter, mENParameter, visitDateParameter, diagnoseParameter, needsParameter);
        }
    
        public virtual int UpdateStudent(Nullable<int> studentID, string studentNIN, string studentName, string studentAddress, Nullable<int> studentAge)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var studentNINParameter = studentNIN != null ?
                new ObjectParameter("StudentNIN", studentNIN) :
                new ObjectParameter("StudentNIN", typeof(string));
    
            var studentNameParameter = studentName != null ?
                new ObjectParameter("StudentName", studentName) :
                new ObjectParameter("StudentName", typeof(string));
    
            var studentAddressParameter = studentAddress != null ?
                new ObjectParameter("StudentAddress", studentAddress) :
                new ObjectParameter("StudentAddress", typeof(string));
    
            var studentAgeParameter = studentAge.HasValue ?
                new ObjectParameter("StudentAge", studentAge) :
                new ObjectParameter("StudentAge", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("UpdateStudent", studentIDParameter, studentNINParameter, studentNameParameter, studentAddressParameter, studentAgeParameter);
        }
    
        public virtual int spAddInstitution(string institutionName)
        {
            var institutionNameParameter = institutionName != null ?
                new ObjectParameter("InstitutionName", institutionName) :
                new ObjectParameter("InstitutionName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddInstitution", institutionNameParameter);
        }
    
        public virtual int spAddMedicalNote(Nullable<int> doctorID, Nullable<int> studentID, Nullable<int> institutionID, string mEN, Nullable<System.DateTime> visitDate, string diagnose, string needs)
        {
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var institutionIDParameter = institutionID.HasValue ?
                new ObjectParameter("InstitutionID", institutionID) :
                new ObjectParameter("InstitutionID", typeof(int));
    
            var mENParameter = mEN != null ?
                new ObjectParameter("MEN", mEN) :
                new ObjectParameter("MEN", typeof(string));
    
            var visitDateParameter = visitDate.HasValue ?
                new ObjectParameter("VisitDate", visitDate) :
                new ObjectParameter("VisitDate", typeof(System.DateTime));
    
            var diagnoseParameter = diagnose != null ?
                new ObjectParameter("Diagnose", diagnose) :
                new ObjectParameter("Diagnose", typeof(string));
    
            var needsParameter = needs != null ?
                new ObjectParameter("Needs", needs) :
                new ObjectParameter("Needs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddMedicalNote", doctorIDParameter, studentIDParameter, institutionIDParameter, mENParameter, visitDateParameter, diagnoseParameter, needsParameter);
        }
    
        public virtual int spAddNewDoctor(string doctorName, string doctorPosition, string doctorUIN, Nullable<int> healthcareFacilityId, string doctorEmail, string doctorPhoneNumber)
        {
            var doctorNameParameter = doctorName != null ?
                new ObjectParameter("DoctorName", doctorName) :
                new ObjectParameter("DoctorName", typeof(string));
    
            var doctorPositionParameter = doctorPosition != null ?
                new ObjectParameter("DoctorPosition", doctorPosition) :
                new ObjectParameter("DoctorPosition", typeof(string));
    
            var doctorUINParameter = doctorUIN != null ?
                new ObjectParameter("DoctorUIN", doctorUIN) :
                new ObjectParameter("DoctorUIN", typeof(string));
    
            var healthcareFacilityIdParameter = healthcareFacilityId.HasValue ?
                new ObjectParameter("HealthcareFacilityId", healthcareFacilityId) :
                new ObjectParameter("HealthcareFacilityId", typeof(int));
    
            var doctorEmailParameter = doctorEmail != null ?
                new ObjectParameter("DoctorEmail", doctorEmail) :
                new ObjectParameter("DoctorEmail", typeof(string));
    
            var doctorPhoneNumberParameter = doctorPhoneNumber != null ?
                new ObjectParameter("DoctorPhoneNumber", doctorPhoneNumber) :
                new ObjectParameter("DoctorPhoneNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddNewDoctor", doctorNameParameter, doctorPositionParameter, doctorUINParameter, healthcareFacilityIdParameter, doctorEmailParameter, doctorPhoneNumberParameter);
        }
    
        public virtual int spAddNewHealthcareFacilitie(string facilityName)
        {
            var facilityNameParameter = facilityName != null ?
                new ObjectParameter("FacilityName", facilityName) :
                new ObjectParameter("FacilityName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddNewHealthcareFacilitie", facilityNameParameter);
        }
    
        public virtual int spAddStudent(string studentNIN, string studentName, string studentAddress, Nullable<int> studentAge)
        {
            var studentNINParameter = studentNIN != null ?
                new ObjectParameter("StudentNIN", studentNIN) :
                new ObjectParameter("StudentNIN", typeof(string));
    
            var studentNameParameter = studentName != null ?
                new ObjectParameter("StudentName", studentName) :
                new ObjectParameter("StudentName", typeof(string));
    
            var studentAddressParameter = studentAddress != null ?
                new ObjectParameter("StudentAddress", studentAddress) :
                new ObjectParameter("StudentAddress", typeof(string));
    
            var studentAgeParameter = studentAge.HasValue ?
                new ObjectParameter("StudentAge", studentAge) :
                new ObjectParameter("StudentAge", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spAddStudent", studentNINParameter, studentNameParameter, studentAddressParameter, studentAgeParameter);
        }
    
        public virtual int spDeleteDoctorByID(Nullable<int> doctorID)
        {
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteDoctorByID", doctorIDParameter);
        }
    
        public virtual int spDeleteHealthcareFacilitieByID(Nullable<int> facilityID)
        {
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteHealthcareFacilitieByID", facilityIDParameter);
        }
    
        public virtual int spDeleteInstitution(Nullable<int> institutionID)
        {
            var institutionIDParameter = institutionID.HasValue ?
                new ObjectParameter("InstitutionID", institutionID) :
                new ObjectParameter("InstitutionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteInstitution", institutionIDParameter);
        }
    
        public virtual int spDeleteStudent(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteStudent", studentIDParameter);
        }
    
        public virtual ObjectResult<spGetDoctorByID_Result> spGetDoctorByID(Nullable<int> doctorID)
        {
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetDoctorByID_Result>("spGetDoctorByID", doctorIDParameter);
        }
    
        public virtual ObjectResult<spGetHealthcareFacilitieByID_Result> spGetHealthcareFacilitieByID(Nullable<int> facilityID)
        {
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetHealthcareFacilitieByID_Result>("spGetHealthcareFacilitieByID", facilityIDParameter);
        }
    
        public virtual ObjectResult<spGetInstitutionByID_Result> spGetInstitutionByID(Nullable<int> institutionID)
        {
            var institutionIDParameter = institutionID.HasValue ?
                new ObjectParameter("InstitutionID", institutionID) :
                new ObjectParameter("InstitutionID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetInstitutionByID_Result>("spGetInstitutionByID", institutionIDParameter);
        }
    
        public virtual ObjectResult<spGetMedicalNoteByID_Result> spGetMedicalNoteByID(Nullable<int> medicalNoteID)
        {
            var medicalNoteIDParameter = medicalNoteID.HasValue ?
                new ObjectParameter("MedicalNoteID", medicalNoteID) :
                new ObjectParameter("MedicalNoteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetMedicalNoteByID_Result>("spGetMedicalNoteByID", medicalNoteIDParameter);
        }
    
        public virtual ObjectResult<spGetStudentByID_Result> spGetStudentByID(Nullable<int> studentID)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<spGetStudentByID_Result>("spGetStudentByID", studentIDParameter);
        }
    
        public virtual int spUpdateDoctorByID(Nullable<int> doctorID, string doctorName, string doctorPosition, string doctorUIN, Nullable<int> healthcareFacilityId, string doctorEmail, string doctorPhoneNumber)
        {
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var doctorNameParameter = doctorName != null ?
                new ObjectParameter("DoctorName", doctorName) :
                new ObjectParameter("DoctorName", typeof(string));
    
            var doctorPositionParameter = doctorPosition != null ?
                new ObjectParameter("DoctorPosition", doctorPosition) :
                new ObjectParameter("DoctorPosition", typeof(string));
    
            var doctorUINParameter = doctorUIN != null ?
                new ObjectParameter("DoctorUIN", doctorUIN) :
                new ObjectParameter("DoctorUIN", typeof(string));
    
            var healthcareFacilityIdParameter = healthcareFacilityId.HasValue ?
                new ObjectParameter("HealthcareFacilityId", healthcareFacilityId) :
                new ObjectParameter("HealthcareFacilityId", typeof(int));
    
            var doctorEmailParameter = doctorEmail != null ?
                new ObjectParameter("DoctorEmail", doctorEmail) :
                new ObjectParameter("DoctorEmail", typeof(string));
    
            var doctorPhoneNumberParameter = doctorPhoneNumber != null ?
                new ObjectParameter("DoctorPhoneNumber", doctorPhoneNumber) :
                new ObjectParameter("DoctorPhoneNumber", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateDoctorByID", doctorIDParameter, doctorNameParameter, doctorPositionParameter, doctorUINParameter, healthcareFacilityIdParameter, doctorEmailParameter, doctorPhoneNumberParameter);
        }
    
        public virtual int spUpdateHealthcareFacilitieByID(Nullable<int> facilityID, string facilityName)
        {
            var facilityIDParameter = facilityID.HasValue ?
                new ObjectParameter("FacilityID", facilityID) :
                new ObjectParameter("FacilityID", typeof(int));
    
            var facilityNameParameter = facilityName != null ?
                new ObjectParameter("FacilityName", facilityName) :
                new ObjectParameter("FacilityName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateHealthcareFacilitieByID", facilityIDParameter, facilityNameParameter);
        }
    
        public virtual int spUpdateInstitution(Nullable<int> institutionID, string institutionName)
        {
            var institutionIDParameter = institutionID.HasValue ?
                new ObjectParameter("InstitutionID", institutionID) :
                new ObjectParameter("InstitutionID", typeof(int));
    
            var institutionNameParameter = institutionName != null ?
                new ObjectParameter("InstitutionName", institutionName) :
                new ObjectParameter("InstitutionName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateInstitution", institutionIDParameter, institutionNameParameter);
        }
    
        public virtual int spUpdateMedicalNote(Nullable<int> medicalNoteID, Nullable<int> doctorID, Nullable<int> studentID, Nullable<int> institutionID, string mEN, Nullable<System.DateTime> visitDate, string diagnose, string needs)
        {
            var medicalNoteIDParameter = medicalNoteID.HasValue ?
                new ObjectParameter("MedicalNoteID", medicalNoteID) :
                new ObjectParameter("MedicalNoteID", typeof(int));
    
            var doctorIDParameter = doctorID.HasValue ?
                new ObjectParameter("DoctorID", doctorID) :
                new ObjectParameter("DoctorID", typeof(int));
    
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var institutionIDParameter = institutionID.HasValue ?
                new ObjectParameter("InstitutionID", institutionID) :
                new ObjectParameter("InstitutionID", typeof(int));
    
            var mENParameter = mEN != null ?
                new ObjectParameter("MEN", mEN) :
                new ObjectParameter("MEN", typeof(string));
    
            var visitDateParameter = visitDate.HasValue ?
                new ObjectParameter("VisitDate", visitDate) :
                new ObjectParameter("VisitDate", typeof(System.DateTime));
    
            var diagnoseParameter = diagnose != null ?
                new ObjectParameter("Diagnose", diagnose) :
                new ObjectParameter("Diagnose", typeof(string));
    
            var needsParameter = needs != null ?
                new ObjectParameter("Needs", needs) :
                new ObjectParameter("Needs", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateMedicalNote", medicalNoteIDParameter, doctorIDParameter, studentIDParameter, institutionIDParameter, mENParameter, visitDateParameter, diagnoseParameter, needsParameter);
        }
    
        public virtual int spUpdateStudent(Nullable<int> studentID, string studentNIN, string studentName, string studentAddress, Nullable<int> studentAge)
        {
            var studentIDParameter = studentID.HasValue ?
                new ObjectParameter("StudentID", studentID) :
                new ObjectParameter("StudentID", typeof(int));
    
            var studentNINParameter = studentNIN != null ?
                new ObjectParameter("StudentNIN", studentNIN) :
                new ObjectParameter("StudentNIN", typeof(string));
    
            var studentNameParameter = studentName != null ?
                new ObjectParameter("StudentName", studentName) :
                new ObjectParameter("StudentName", typeof(string));
    
            var studentAddressParameter = studentAddress != null ?
                new ObjectParameter("StudentAddress", studentAddress) :
                new ObjectParameter("StudentAddress", typeof(string));
    
            var studentAgeParameter = studentAge.HasValue ?
                new ObjectParameter("StudentAge", studentAge) :
                new ObjectParameter("StudentAge", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spUpdateStudent", studentIDParameter, studentNINParameter, studentNameParameter, studentAddressParameter, studentAgeParameter);
        }
    }
}
